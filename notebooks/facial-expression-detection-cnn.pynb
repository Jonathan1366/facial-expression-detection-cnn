{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":126145,"status":"ok","timestamp":1747190913573,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"},"user_tz":-420},"id":"g6lkG8dkP20N","outputId":"2c7918d8-e06d-4682-8645-bdf42592b6f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m117.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m85.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m58.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m15.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m101.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.6/17.6 MB\u001b[0m \u001b[31m111.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.4/16.4 MB\u001b[0m \u001b[31m76.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.8/86.8 kB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDrive folder terhubung: /content/drive/MyDrive/Colab Notebooks\n","total 1.5G\n","-rw------- 1 root root  36K May 14 02:47 'ACCESSORIES_SMILE DETECTION.pynb'\n","drwx------ 2 root root 4.0K May  7 06:03  Dataset2\n","-rw------- 1 root root  61M May  7 05:04  fer2013.zip\n","-rw------- 1 root root 1.4G May  7 07:43  img_align_celeba.zip\n","-rw------- 1 root root  26M May  7 03:52  list_attr_celeba.txt\n","-rw------- 1 root root 2.8M May  7 06:20  list_eval_partition.txt\n","-rw------- 1 root root  38M May  7 05:01  raf-db.zip\n","-rw------- 1 root root 4.0M May  6 15:24  skincolordata.csv\n","-rw------- 1 root root  11M May  7 07:56  SMILE.zip\n","-rw------- 1 root root 61M May 14 02:48 fer2013.zip\n","fer2013:\n","test\n","train\n","\n","fer2013/test:\n","angry\n","disgust\n","fear\n","happy\n","neutral\n","sad\n","surprise\n","\n","fer2013/test/angry:\n","PrivateTest_10131363.jpg\n","PrivateTest_10304478.jpg\n","PrivateTest_1054527.jpg\n","PrivateTest_10590091.jpg\n","PrivateTest_1109992.jpg\n","PrivateTest_11296953.jpg\n","PrivateTest_12000629.jpg\n","PrivateTest_12008383.jpg\n","PrivateTest_12191716.jpg\n","PrivateTest_1221822.jpg\n","PrivateTest_12403575.jpg\n","PrivateTest_12766285.jpg\n","PrivateTest_12846357.jpg\n","PrivateTest_1290484.jpg\n","PrivateTest_12912780.jpg\n","PrivateTest_13164119.jpg\n","PrivateTest_13278552.jpg\n","PrivateTest_13463625.jpg\n","PrivateTest_13541561.jpg\n","PrivateTest_13664224.jpg\n","PrivateTest_14325168.jpg\n","PrivateTest_14426977.jpg\n","PrivateTest_14433751.jpg\n","PrivateTest_14444117.jpg\n","PrivateTest_14482875.jpg\n","PrivateTest_14494003.jpg\n","PrivateTest_14565821.jpg\n","PrivateTest_14596578.jpg\n","PrivateTest_14740105.jpg\n","PrivateTest_14769246.jpg\n","PrivateTest_1488292.jpg\n","PrivateTest_14887556.jpg\n","PrivateTest_15489614.jpg\n","PrivateTest_15827448.jpg\n","PrivateTest_15855670.jpg\n","PrivateTest_1623042.jpg\n"]}],"source":["# ✅ Mount Google Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# ✅ Install dependencies\n","!pip install opencv-python-headless torch torchvision onnx onnxruntime --quiet\n","\n","# ✅ Buat variabel path\n","DATA_PATH = '/content/drive/MyDrive/Colab Notebooks'\n","print(\"Drive folder terhubung:\", DATA_PATH)\n","\n","# ✅ Cek isi folder Drive\n","!ls -lh \"{DATA_PATH}\"\n","\n","# ✅ Salin file fer2013.zip dari Drive ke Colab local\n","!cp \"{DATA_PATH}/fer2013.zip\" .\n","\n","# ✅ Cek apakah file berhasil dicopy\n","!ls -lh fer2013.zip\n","\n","# ✅ Unzip isinya\n","!unzip -q fer2013.zip -d fer2013\n","\n","# ✅ Tampilkan struktur setelah unzip\n","!ls -R fer2013 | head -50\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3279,"status":"ok","timestamp":1747190963569,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"},"user_tz":-420},"id":"jRaFTIg5iGhg","outputId":"9f27d8e4-3ce9-4bc2-c27f-66c86f88a2df"},"outputs":[{"output_type":"stream","name":"stdout","text":["rafdb:\n","DATASET\n","test_labels.csv\n","train_labels.csv\n","\n","rafdb/DATASET:\n","test\n","train\n","\n","rafdb/DATASET/test:\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","\n","rafdb/DATASET/test/1:\n","test_0002_aligned.jpg\n","test_0004_aligned.jpg\n","test_0008_aligned.jpg\n","test_0015_aligned.jpg\n","test_0023_aligned.jpg\n","test_0034_aligned.jpg\n","test_0035_aligned.jpg\n","test_0043_aligned.jpg\n","test_0059_aligned.jpg\n","test_0073_aligned.jpg\n","test_0084_aligned.jpg\n","test_0086_aligned.jpg\n","test_0090_aligned.jpg\n","test_0094_aligned.jpg\n","test_0096_aligned.jpg\n","test_0099_aligned.jpg\n","test_0102_aligned.jpg\n","test_0104_aligned.jpg\n","test_0121_aligned.jpg\n","test_0123_aligned.jpg\n","test_0125_aligned.jpg\n","test_0127_aligned.jpg\n","test_0135_aligned.jpg\n","test_0147_aligned.jpg\n","test_0151_aligned.jpg\n","test_0153_aligned.jpg\n","test_0155_aligned.jpg\n","test_0163_aligned.jpg\n","test_0165_aligned.jpg\n","test_0168_aligned.jpg\n","test_0169_aligned.jpg\n"]}],"source":["!cp \"{DATA_PATH}/raf-db.zip\" .\n","!unzip -q raf-db.zip -d rafdb\n","!ls -R rafdb | head -50"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from torch.cuda.amp import autocast, GradScaler\n","from torch.utils.data import DataLoader\n","from torchvision import datasets, transforms\n","from tqdm import tqdm\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# ==================== SETUP ====================\n","scaler = GradScaler()\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(\"Aktif di:\", device)\n","\n","transform = transforms.Compose([\n","    transforms.Grayscale(num_output_channels=1),\n","    transforms.Resize((48, 48)),\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5,), (0.5,))\n","])\n","\n","data_paths = {\n","    \"fer2013\": \"fer2013/train\",\n","    \"rafdb\": \"rafdb/DATASET/train\"\n","}\n","\n","datasets_dict = {\n","    name: datasets.ImageFolder(root=path, transform=transform)\n","    for name, path in data_paths.items()\n","}\n","\n","dataloaders = {\n","    name: DataLoader(ds, batch_size=64, shuffle=True)\n","    for name, ds in datasets_dict.items()\n","}\n","\n","# ==================== MODEL ====================\n","class SimpleCNN(nn.Module):\n","    def __init__(self, num_classes):\n","        super(SimpleCNN, self).__init__()\n","        self.conv = nn.Sequential(\n","            nn.Conv2d(1, 32, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2),\n","            nn.Conv2d(32, 64, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2)\n","        )\n","        self.fc = nn.Sequential(\n","            nn.Linear(64 * 12 * 12, 128), nn.ReLU(),\n","            nn.Linear(128, num_classes)\n","        )\n","\n","    def forward(self, x):\n","        x = self.conv(x)\n","        x = x.view(x.size(0), -1)\n","        return self.fc(x)\n","\n","# ==================== TRAINING ====================\n","def train_model(dataloader, num_classes, dataset_name, epochs=40):\n","    model = SimpleCNN(num_classes).to(device)\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","    accuracy_list = []\n","    loss_list = []\n","\n","    for epoch in range(epochs):\n","        model.train()\n","        correct, total, running_loss = 0, 0, 0\n","\n","        loop = tqdm(enumerate(dataloader), total=len(dataloader),\n","                    desc=f\"[{dataset_name}] Epoch {epoch+1}/{epochs}\", ncols=100)\n","\n","        for i, (images, labels) in loop:\n","            images, labels = images.to(device), labels.to(device)\n","\n","            optimizer.zero_grad()\n","            with autocast():\n","                outputs = model(images)\n","                loss = criterion(outputs, labels)\n","\n","            scaler.scale(loss).backward()\n","            scaler.step(optimizer)\n","            scaler.update()\n","\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","            running_loss += loss.item()\n","\n","            acc = 100 * correct / total\n","            loop.set_postfix(loss=loss.item(), acc=f\"{acc:.2f}%\")\n","\n","        avg_loss = running_loss / len(dataloader)\n","        final_acc = 100 * correct / total\n","        accuracy_list.append(final_acc)\n","        loss_list.append(avg_loss)\n","\n","        print(f\"✅ [{dataset_name}] Epoch {epoch+1}: Akurasi = {final_acc:.2f}%, Loss = {avg_loss:.4f}\")\n","\n","    # Simpan metrik ke CSV\n","    pd.DataFrame({\n","        \"epoch\": range(1, epochs + 1),\n","        \"accuracy\": accuracy_list,\n","        \"loss\": loss_list\n","    }).to_csv(f\"training_metrics_{dataset_name}.csv\", index=False)\n","\n","    return model, accuracy_list, loss_list\n","\n","# ==================== EVALUATION ====================\n","def evaluate_model(model, dataloader, dataset_name):\n","    model.eval()\n","    all_preds, all_labels = [], []\n","\n","    with torch.no_grad():\n","        for images, labels in dataloader:\n","            images, labels = images.to(device), labels.to(device)\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs, 1)\n","            all_preds.extend(predicted.cpu().numpy())\n","            all_labels.extend(labels.cpu().numpy())\n","\n","    class_names = dataloader.dataset.classes\n","\n","    # Confusion Matrix\n","    cm = confusion_matrix(all_labels, all_preds)\n","    cm_df = pd.DataFrame(cm, index=class_names, columns=class_names)\n","\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues')\n","    plt.title(f'Confusion Matrix - {dataset_name.upper()}')\n","    plt.xlabel(\"Predicted\")\n","    plt.ylabel(\"Actual\")\n","    plt.tight_layout()\n","    plt.savefig(f\"confusion_matrix_{dataset_name}.png\")\n","    plt.close()\n","\n","    # Classification Report\n","    report = classification_report(all_labels, all_preds, target_names=class_names, output_dict=True)\n","    pd.DataFrame(report).transpose().to_csv(f\"classification_report_{dataset_name}.csv\")\n","\n","# ==================== MAIN EXECUTION ====================\n","results = {}\n","\n","for name, dataloader in dataloaders.items():\n","    print(f\"\\nMulai training untuk dataset: {name.upper()}\")\n","    model, acc_list, loss_list = train_model(\n","        dataloader,\n","        num_classes=len(datasets_dict[name].classes),\n","        dataset_name=name.upper()\n","    )\n","\n","    # Save model\n","    torch.save(model.state_dict(), f\"{name}_model.pt\")\n","\n","    # Evaluate\n","    evaluate_model(model, dataloader, name)\n","\n","    # Accuracy plot\n","    plt.figure(figsize=(6, 4))\n","    plt.plot(range(1, len(acc_list)+1), acc_list, marker='o')\n","    plt.title(f\"Accuracy per Epoch - {name.upper()}\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Accuracy (%)\")\n","    plt.grid(True)\n","    plt.savefig(f\"accuracy_plot_{name}.png\")\n","    plt.close()\n","\n","    # Loss plot\n","    plt.figure(figsize=(6, 4))\n","    plt.plot(range(1, len(loss_list)+1), loss_list, marker='o', color='red')\n","    plt.title(f\"Loss per Epoch - {name.upper()}\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Loss\")\n","    plt.grid(True)\n","    plt.savefig(f\"loss_plot_{name}.png\")\n","    plt.close()\n","\n","print(\"Training dan evaluasi selesai untuk semua dataset.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uoDGsAtqH14P","executionInfo":{"status":"ok","timestamp":1747199171265,"user_tz":-420,"elapsed":1044891,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"}},"outputId":"1951f9c0-36e6-4747-9106-566631872ffa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-16-f05a5f1fefd1>:16: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n","  scaler = GradScaler()\n"]},{"output_type":"stream","name":"stdout","text":["Aktif di: cuda\n","\n","Mulai training untuk dataset: FER2013\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 1/40:   0%|                                                 | 0/449 [00:00<?, ?it/s]<ipython-input-16-f05a5f1fefd1>:80: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n","  with autocast():\n","[FER2013] Epoch 1/40: 100%|████████████████| 449/449 [00:16<00:00, 27.10it/s, acc=38.42%, loss=1.34]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 1: Akurasi = 38.42%, Loss = 1.5709\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 2/40: 100%|████████████████| 449/449 [00:16<00:00, 27.96it/s, acc=49.47%, loss=1.33]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 2: Akurasi = 49.47%, Loss = 1.3211\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 3/40: 100%|████████████████| 449/449 [00:18<00:00, 23.98it/s, acc=54.99%, loss=1.27]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 3: Akurasi = 54.99%, Loss = 1.1839\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 4/40: 100%|████████████████| 449/449 [00:15<00:00, 28.28it/s, acc=60.72%, loss=1.03]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 4: Akurasi = 60.72%, Loss = 1.0507\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 5/40: 100%|███████████████| 449/449 [00:15<00:00, 28.15it/s, acc=66.02%, loss=0.755]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 5: Akurasi = 66.02%, Loss = 0.9138\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 6/40: 100%|███████████████| 449/449 [00:16<00:00, 27.30it/s, acc=72.02%, loss=0.674]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 6: Akurasi = 72.02%, Loss = 0.7679\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 7/40: 100%|███████████████| 449/449 [00:16<00:00, 27.58it/s, acc=78.07%, loss=0.612]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 7: Akurasi = 78.07%, Loss = 0.6145\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 8/40: 100%|███████████████| 449/449 [00:16<00:00, 26.53it/s, acc=83.81%, loss=0.662]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 8: Akurasi = 83.81%, Loss = 0.4633\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 9/40: 100%|███████████████| 449/449 [00:16<00:00, 27.79it/s, acc=88.78%, loss=0.295]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 9: Akurasi = 88.78%, Loss = 0.3373\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 10/40: 100%|██████████████| 449/449 [00:16<00:00, 27.10it/s, acc=92.27%, loss=0.221]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 10: Akurasi = 92.27%, Loss = 0.2391\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 11/40: 100%|██████████████| 449/449 [00:16<00:00, 26.79it/s, acc=95.10%, loss=0.183]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 11: Akurasi = 95.10%, Loss = 0.1662\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 12/40: 100%|██████████████| 449/449 [00:16<00:00, 28.04it/s, acc=96.12%, loss=0.192]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 12: Akurasi = 96.12%, Loss = 0.1335\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 13/40: 100%|█████████████| 449/449 [00:16<00:00, 27.95it/s, acc=97.09%, loss=0.0974]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 13: Akurasi = 97.09%, Loss = 0.1020\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 14/40: 100%|█████████████| 449/449 [00:16<00:00, 28.03it/s, acc=97.57%, loss=0.0444]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 14: Akurasi = 97.57%, Loss = 0.0943\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 15/40: 100%|█████████████| 449/449 [00:16<00:00, 27.31it/s, acc=97.88%, loss=0.0934]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 15: Akurasi = 97.88%, Loss = 0.0803\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 16/40: 100%|██████████████| 449/449 [00:17<00:00, 26.16it/s, acc=98.44%, loss=0.019]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 16: Akurasi = 98.44%, Loss = 0.0627\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 17/40: 100%|█████████████| 449/449 [00:16<00:00, 27.58it/s, acc=97.88%, loss=0.0596]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 17: Akurasi = 97.88%, Loss = 0.0773\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 18/40: 100%|██████████████| 449/449 [00:16<00:00, 27.92it/s, acc=98.15%, loss=0.118]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 18: Akurasi = 98.15%, Loss = 0.0712\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 19/40: 100%|██████████████| 449/449 [00:16<00:00, 27.08it/s, acc=98.17%, loss=0.245]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 19: Akurasi = 98.17%, Loss = 0.0685\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 20/40: 100%|█████████████| 449/449 [00:16<00:00, 27.10it/s, acc=98.23%, loss=0.0437]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 20: Akurasi = 98.23%, Loss = 0.0625\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 21/40: 100%|██████████████| 449/449 [00:16<00:00, 27.72it/s, acc=98.68%, loss=0.192]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 21: Akurasi = 98.68%, Loss = 0.0511\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 22/40: 100%|█████████████| 449/449 [00:16<00:00, 27.89it/s, acc=98.11%, loss=0.0222]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 22: Akurasi = 98.11%, Loss = 0.0671\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 23/40: 100%|█████████████| 449/449 [00:16<00:00, 27.12it/s, acc=98.68%, loss=0.0339]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 23: Akurasi = 98.68%, Loss = 0.0509\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 24/40: 100%|█████████████| 449/449 [00:18<00:00, 24.90it/s, acc=98.84%, loss=0.0375]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 24: Akurasi = 98.84%, Loss = 0.0460\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 25/40: 100%|█████████████| 449/449 [00:16<00:00, 27.27it/s, acc=98.65%, loss=0.0239]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 25: Akurasi = 98.65%, Loss = 0.0504\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 26/40: 100%|████████████| 449/449 [00:16<00:00, 27.41it/s, acc=98.84%, loss=0.00522]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 26: Akurasi = 98.84%, Loss = 0.0450\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 27/40: 100%|█████████████| 449/449 [00:15<00:00, 28.18it/s, acc=98.79%, loss=0.0192]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 27: Akurasi = 98.79%, Loss = 0.0503\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 28/40: 100%|█████████████| 449/449 [00:16<00:00, 26.73it/s, acc=98.44%, loss=0.0972]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 28: Akurasi = 98.44%, Loss = 0.0540\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 29/40: 100%|████████████| 449/449 [00:16<00:00, 28.00it/s, acc=98.59%, loss=0.00615]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 29: Akurasi = 98.59%, Loss = 0.0545\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 30/40: 100%|████████████| 449/449 [00:15<00:00, 28.32it/s, acc=98.76%, loss=0.00179]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 30: Akurasi = 98.76%, Loss = 0.0473\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 31/40: 100%|████████████| 449/449 [00:15<00:00, 28.07it/s, acc=98.93%, loss=0.00689]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 31: Akurasi = 98.93%, Loss = 0.0393\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 32/40: 100%|█████████████| 449/449 [00:16<00:00, 27.30it/s, acc=99.39%, loss=0.0286]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 32: Akurasi = 99.39%, Loss = 0.0290\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 33/40: 100%|████████████| 449/449 [00:16<00:00, 27.29it/s, acc=99.12%, loss=0.00692]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 33: Akurasi = 99.12%, Loss = 0.0383\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 34/40: 100%|█████████████| 449/449 [00:15<00:00, 28.16it/s, acc=98.89%, loss=0.0366]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 34: Akurasi = 98.89%, Loss = 0.0442\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 35/40: 100%|█████████████| 449/449 [00:16<00:00, 26.71it/s, acc=98.53%, loss=0.0258]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 35: Akurasi = 98.53%, Loss = 0.0519\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 36/40: 100%|██████████████| 449/449 [00:15<00:00, 28.20it/s, acc=98.80%, loss=0.226]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 36: Akurasi = 98.80%, Loss = 0.0448\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 37/40: 100%|█████████████| 449/449 [00:16<00:00, 26.99it/s, acc=99.00%, loss=0.0211]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 37: Akurasi = 99.00%, Loss = 0.0385\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 38/40: 100%|█████████████| 449/449 [00:15<00:00, 28.48it/s, acc=99.27%, loss=0.0181]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 38: Akurasi = 99.27%, Loss = 0.0304\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 39/40: 100%|██████████████| 449/449 [00:16<00:00, 26.75it/s, acc=99.44%, loss=0.022]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 39: Akurasi = 99.44%, Loss = 0.0271\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 40/40: 100%|█████████████| 449/449 [00:15<00:00, 28.43it/s, acc=99.34%, loss=0.0756]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [FER2013] Epoch 40: Akurasi = 99.34%, Loss = 0.0315\n","\n","Mulai training untuk dataset: RAFDB\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 1/40:   0%|                                                   | 0/192 [00:00<?, ?it/s]<ipython-input-16-f05a5f1fefd1>:80: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n","  with autocast():\n","[RAFDB] Epoch 1/40: 100%|██████████████████| 192/192 [00:09<00:00, 20.54it/s, acc=52.61%, loss=0.87]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 1: Akurasi = 52.61%, Loss = 1.2887\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 2/40: 100%|█████████████████| 192/192 [00:09<00:00, 20.91it/s, acc=65.33%, loss=0.863]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 2: Akurasi = 65.33%, Loss = 0.9769\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 3/40: 100%|█████████████████| 192/192 [00:08<00:00, 22.56it/s, acc=70.92%, loss=0.873]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 3: Akurasi = 70.92%, Loss = 0.8297\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 4/40: 100%|█████████████████| 192/192 [00:09<00:00, 20.41it/s, acc=74.43%, loss=0.694]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 4: Akurasi = 74.43%, Loss = 0.7274\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 5/40: 100%|█████████████████| 192/192 [00:09<00:00, 20.50it/s, acc=77.14%, loss=0.778]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 5: Akurasi = 77.14%, Loss = 0.6525\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 6/40: 100%|█████████████████| 192/192 [00:08<00:00, 22.40it/s, acc=79.88%, loss=0.511]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 6: Akurasi = 79.88%, Loss = 0.5666\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 7/40: 100%|█████████████████| 192/192 [00:09<00:00, 20.37it/s, acc=82.59%, loss=0.388]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 7: Akurasi = 82.59%, Loss = 0.4915\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 8/40: 100%|█████████████████| 192/192 [00:09<00:00, 20.76it/s, acc=85.05%, loss=0.408]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 8: Akurasi = 85.05%, Loss = 0.4217\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 9/40: 100%|█████████████████| 192/192 [00:08<00:00, 22.61it/s, acc=87.76%, loss=0.733]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 9: Akurasi = 87.76%, Loss = 0.3535\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 10/40: 100%|████████████████| 192/192 [00:09<00:00, 20.54it/s, acc=89.94%, loss=0.529]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 10: Akurasi = 89.94%, Loss = 0.2912\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 11/40: 100%|████████████████| 192/192 [00:09<00:00, 20.56it/s, acc=92.67%, loss=0.179]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 11: Akurasi = 92.67%, Loss = 0.2236\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 12/40: 100%|████████████████| 192/192 [00:08<00:00, 22.98it/s, acc=94.53%, loss=0.243]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 12: Akurasi = 94.53%, Loss = 0.1703\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 13/40: 100%|█████████████████| 192/192 [00:09<00:00, 20.96it/s, acc=95.53%, loss=0.23]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 13: Akurasi = 95.53%, Loss = 0.1362\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 14/40: 100%|████████████████| 192/192 [00:09<00:00, 20.45it/s, acc=96.68%, loss=0.149]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 14: Akurasi = 96.68%, Loss = 0.1065\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 15/40: 100%|███████████████| 192/192 [00:08<00:00, 22.84it/s, acc=98.09%, loss=0.0945]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 15: Akurasi = 98.09%, Loss = 0.0711\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 16/40: 100%|███████████████| 192/192 [00:09<00:00, 20.43it/s, acc=98.55%, loss=0.0571]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 16: Akurasi = 98.55%, Loss = 0.0531\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 17/40: 100%|███████████████| 192/192 [00:09<00:00, 20.51it/s, acc=99.04%, loss=0.0251]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 17: Akurasi = 99.04%, Loss = 0.0402\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 18/40: 100%|████████████████| 192/192 [00:08<00:00, 22.16it/s, acc=99.55%, loss=0.017]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 18: Akurasi = 99.55%, Loss = 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 19/40: 100%|████████████████| 192/192 [00:09<00:00, 20.97it/s, acc=99.54%, loss=0.058]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 19: Akurasi = 99.54%, Loss = 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 20/40: 100%|██████████████| 192/192 [00:09<00:00, 20.66it/s, acc=99.89%, loss=0.00335]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 20: Akurasi = 99.89%, Loss = 0.0127\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 21/40: 100%|█████████████| 192/192 [00:08<00:00, 22.10it/s, acc=100.00%, loss=0.00519]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 21: Akurasi = 100.00%, Loss = 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 22/40: 100%|█████████████| 192/192 [00:09<00:00, 21.15it/s, acc=100.00%, loss=0.00425]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 22: Akurasi = 100.00%, Loss = 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 23/40: 100%|█████████████| 192/192 [00:09<00:00, 20.29it/s, acc=100.00%, loss=0.00113]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 23: Akurasi = 100.00%, Loss = 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 24/40: 100%|████████████| 192/192 [00:09<00:00, 20.32it/s, acc=100.00%, loss=0.000621]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 24: Akurasi = 100.00%, Loss = 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 25/40: 100%|████████████| 192/192 [00:09<00:00, 19.78it/s, acc=100.00%, loss=0.000987]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 25: Akurasi = 100.00%, Loss = 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 26/40: 100%|████████████| 192/192 [00:10<00:00, 17.97it/s, acc=100.00%, loss=0.000321]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 26: Akurasi = 100.00%, Loss = 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 27/40: 100%|████████████| 192/192 [00:08<00:00, 22.62it/s, acc=100.00%, loss=0.000323]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 27: Akurasi = 100.00%, Loss = 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 28/40: 100%|████████████| 192/192 [00:09<00:00, 20.49it/s, acc=100.00%, loss=0.000472]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 28: Akurasi = 100.00%, Loss = 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 29/40: 100%|█████████████| 192/192 [00:09<00:00, 20.22it/s, acc=100.00%, loss=0.00076]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 29: Akurasi = 100.00%, Loss = 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 30/40: 100%|████████████| 192/192 [00:08<00:00, 22.40it/s, acc=100.00%, loss=0.000256]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 30: Akurasi = 100.00%, Loss = 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 31/40: 100%|████████████| 192/192 [00:09<00:00, 20.62it/s, acc=100.00%, loss=0.000611]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 31: Akurasi = 100.00%, Loss = 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 32/40: 100%|█████████████| 192/192 [00:09<00:00, 20.68it/s, acc=100.00%, loss=0.00055]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 32: Akurasi = 100.00%, Loss = 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 33/40: 100%|█████████████| 192/192 [00:08<00:00, 22.23it/s, acc=100.00%, loss=0.00025]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 33: Akurasi = 100.00%, Loss = 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 34/40: 100%|████████████| 192/192 [00:09<00:00, 20.67it/s, acc=100.00%, loss=0.000329]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 34: Akurasi = 100.00%, Loss = 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 35/40: 100%|████████████| 192/192 [00:09<00:00, 20.06it/s, acc=100.00%, loss=0.000178]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 35: Akurasi = 100.00%, Loss = 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 36/40: 100%|████████████| 192/192 [00:08<00:00, 21.55it/s, acc=100.00%, loss=0.000215]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 36: Akurasi = 100.00%, Loss = 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 37/40: 100%|████████████| 192/192 [00:08<00:00, 21.48it/s, acc=100.00%, loss=0.000203]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 37: Akurasi = 100.00%, Loss = 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 38/40: 100%|████████████| 192/192 [00:09<00:00, 20.70it/s, acc=100.00%, loss=0.000116]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 38: Akurasi = 100.00%, Loss = 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 39/40: 100%|█████████████| 192/192 [00:08<00:00, 21.84it/s, acc=100.00%, loss=9.16e-5]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 39: Akurasi = 100.00%, Loss = 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["[RAFDB] Epoch 40/40: 100%|████████████| 192/192 [00:08<00:00, 21.69it/s, acc=100.00%, loss=0.000135]\n"]},{"output_type":"stream","name":"stdout","text":["✅ [RAFDB] Epoch 40: Akurasi = 100.00%, Loss = 0.0001\n","Training dan evaluasi selesai untuk semua dataset.\n"]}]},{"cell_type":"code","source":["import os\n","import base64\n","import requests\n","from getpass import getpass\n","\n","# --- Konfigurasi akun GitHub ---\n","token = getpass('🔐 Masukkan GitHub Token:')\n","username = \"jonathan1366\"\n","repo = \"facial-expression-detection-cnn\"\n","branch = \"main\"\n","\n","# --- File yang ingin diupload dan target folder di repo ---\n","files_to_upload = [\n","    (\"fer2013_model.pt\", \"models\"),\n","    (\"rafdb_model.pt\", \"models\"),\n","    (\"accuracy_plot_fer2013.png\", \"outputs\"),\n","    (\"accuracy_plot_rafdb.png\", \"outputs\"),\n","    (\"loss_plot_fer2013.png\", \"outputs\"),\n","    (\"loss_plot_rafdb.png\", \"outputs\"),\n","    (\"training_metrics_FER2013.csv\", \"outputs\"),\n","    (\"training_metrics_RAFDB.csv\", \"outputs\"),\n","    (\"confusion_matrix_rafdb.png\", \"outputs\"),\n","    (\"facial-expression-detection-cnn.ipynb\", \"notebooks\")  # jika kamu mau upload notebook juga\n","]\n","\n","# --- Upload satu per satu via GitHub API ---\n","for file_name, target_path in files_to_upload:\n","    file_path = file_name\n","    with open(file_path, \"rb\") as f:\n","        content = f.read()\n","\n","    encoded_content = base64.b64encode(content).decode(\"utf-8\")\n","\n","    # URL GitHub API (tanpa .git, tanpa 'main/')\n","    url = f\"https://api.github.com/repos/jonathan1366/facial-expression-detection-cnn/contents/{target_path}/{file_name}\"\n","\n","    headers = {\n","        \"Authorization\": f\"token {token}\",\n","        \"Accept\": \"application/vnd.github.v3+json\",\n","    }\n","\n","    data = {\n","        \"message\": f\"Upload {file_name} to {target_path}/\",\n","        \"content\": encoded_content,\n","        \"branch\": branch,\n","    }\n","\n","    response = requests.put(url, headers=headers, json=data)\n","\n","    if response.status_code == 201:\n","        print(f\"✅ Berhasil upload: {target_path}/{file_name}\")\n","    else:\n","        print(f\"❌ Gagal upload: {file_name} — {response.json().get('message')}\")\n"],"metadata":{"id":"tkbFtfjpYY3o","colab":{"base_uri":"https://localhost:8080/","height":228},"executionInfo":{"status":"error","timestamp":1747206012630,"user_tz":-420,"elapsed":9475,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"}},"outputId":"ab72b638-6a4c-4959-cfa3-1828d448853f"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["🔐 Masukkan GitHub Token:··········\n"]},{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'fer2013_model.pt'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-79bd88f0d3cd>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfile_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_path\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfiles_to_upload\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m         \u001b[0mcontent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'fer2013_model.pt'"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"facial-expression-detection-cnn.pynb\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":280},"id":"krV5ju2cnBOx","executionInfo":{"status":"error","timestamp":1747206352054,"user_tz":-420,"elapsed":212,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"}},"outputId":"aafda441-1898-443b-f214-66f46c63f8de"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"Cannot find file: facial-expression-detection-cnn.pynb","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-2200201d0be1>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"facial-expression-detection-cnn.pynb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mdownload\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m    231\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Cannot find file: {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 233\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=undefined-variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m   \u001b[0mcomm_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_IPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomm_manager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: Cannot find file: facial-expression-detection-cnn.pynb"]}]},{"cell_type":"code","source":["# from pathlib import Path\n","\n","# script_path = Path(\"/mnt/data/final_train_metrics_complete.py\")\n","# # script_content = # ✅ Final Version: Training Script with Classification Report, Confusion Matrix, Accuracy/Loss CSV & PNG Export\n","\n","# from torch.cuda.amp import autocast, GradScaler\n","# from sklearn.metrics import confusion_matrix, classification_report\n","# import seaborn as sns\n","# import pandas as pd\n","# import os\n","# import torch\n","# import torch.nn as nn\n","# import torch.optim as optim\n","# from torchvision import datasets, transforms\n","# from torch.utils.data import DataLoader\n","# from tqdm import tqdm\n","# import matplotlib.pyplot as plt\n","\n","# scaler = GradScaler()\n","# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","# print(\"🖥️ Device aktif:\", device)\n","\n","# transform = transforms.Compose([\n","#     transforms.Grayscale(num_output_channels=1),\n","#     transforms.Resize((48, 48)),\n","#     transforms.ToTensor(),\n","#     transforms.Normalize((0.5,), (0.5,))\n","# ])\n","\n","# data_paths = {\n","#     \"fer2013\": \"fer2013/train\",\n","#     \"rafdb\": \"rafdb/DATASET/train\"\n","# }\n","\n","# datasets_dict = {\n","#     name: datasets.ImageFolder(root=path, transform=transform)\n","#     for name, path in data_paths.items()\n","# }\n","\n","# dataloaders = {\n","#     name: DataLoader(ds, batch_size=64, shuffle=True)\n","#     for name, ds in datasets_dict.items()\n","# }\n","\n","# class SimpleCNN(nn.Module):\n","#     def __init__(self, num_classes):\n","#         super(SimpleCNN, self).__init__()\n","#         self.conv = nn.Sequential(\n","#             nn.Conv2d(1, 32, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2),\n","#             nn.Conv2d(32, 64, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2)\n","#         )\n","#         self.fc = nn.Sequential(\n","#             nn.Linear(64 * 12 * 12, 128), nn.ReLU(),\n","#             nn.Linear(128, num_classes)\n","#         )\n","\n","#     def forward(self, x):\n","#         x = self.conv(x)\n","#         x = x.view(x.size(0), -1)\n","#         return self.fc(x)\n","\n","# def train_model(dataloader, num_classes, dataset_name, epochs=40):\n","#     model = SimpleCNN(num_classes).to(device)\n","#     criterion = nn.CrossEntropyLoss()\n","#     optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","#     accuracy_list = []\n","#     loss_list = []\n","\n","#     for epoch in range(epochs):\n","#         correct, total = 0, 0\n","#         running_loss = 0\n","#         model.train()\n","\n","#         loop = tqdm(enumerate(dataloader), total=len(dataloader),\n","#                     desc=f\"[{dataset_name}] Epoch {epoch+1}/{epochs}\",\n","#                     leave=True, ncols=100)\n","\n","#         for i, (images, labels) in loop:\n","#             images, labels = images.to(device), labels.to(device)\n","\n","#             optimizer.zero_grad()\n","#             with autocast():\n","#                 outputs = model(images)\n","#                 loss = criterion(outputs, labels)\n","\n","#             scaler.scale(loss).backward()\n","#             scaler.step(optimizer)\n","#             scaler.update()\n","\n","#             _, predicted = torch.max(outputs.data, 1)\n","#             total += labels.size(0)\n","#             correct += (predicted == labels).sum().item()\n","#             running_loss += loss.item()\n","\n","#             acc = 100 * correct / total\n","#             loop.set_postfix(batch=i+1, loss=loss.item(), acc=f\"{acc:.2f}%\")\n","\n","#         acc = 100 * correct / total\n","#         avg_loss = running_loss / len(dataloader)\n","#         accuracy_list.append(acc)\n","#         loss_list.append(avg_loss)\n","#         print(f\"Selesai [{dataset_name}] Epoch {epoch+1}: Akurasi = {acc:.2f}%, Loss = {avg_loss:.4f}\\\\n\")\n","\n","#     df_metrics = pd.DataFrame({'epoch': list(range(1, len(accuracy_list)+1)),\n","#                                'accuracy': accuracy_list,\n","#                                'loss': loss_list})\n","#     df_metrics.to_csv(f\"training_metrics_{dataset_name}.csv\", index=False)\n","#     return model, accuracy_list, loss_list\n","\n","# def evaluate_model(model, dataloader, dataset_name):\n","#     model.eval()\n","#     all_preds = []\n","#     all_labels = []\n","\n","#     with torch.no_grad():\n","#         for images, labels in dataloader:\n","#             images, labels = images.to(device), labels.to(device)\n","#             outputs = model(images)\n","#             _, predicted = torch.max(outputs, 1)\n","#             all_preds.extend(predicted.cpu().numpy())\n","#             all_labels.extend(labels.cpu().numpy())\n","\n","#     class_names = dataloader.dataset.classes\n","#     cm = confusion_matrix(all_labels, all_preds)\n","#     cm_df = pd.DataFrame(cm, index=class_names, columns=class_names)\n","\n","#     # Save confusion matrix PNG\n","#     plt.figure(figsize=(8, 6))\n","#     sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues')\n","#     plt.title(f'Confusion Matrix - {dataset_name.upper()}')\n","#     plt.xlabel(\"Predicted Label\")\n","#     plt.ylabel(\"True Label\")\n","#     plt.tight_layout()\n","#     plt.savefig(f\"confusion_matrix_{dataset_name}.png\")\n","#     plt.close()\n","\n","#     # Save classification report CSV\n","#     report_dict = classification_report(all_labels, all_preds, target_names=class_names, output_dict=True)\n","#     pd.DataFrame(report_dict).transpose().to_csv(f\"classification_report_{dataset_name}.csv\")\n","\n","# results = {}\n","# for name, dataloader in dataloaders.items():\n","#     print(f\"\\\\nMulai training model untuk dataset: {name.upper()}\")\n","#     model, acc_list, loss_list = train_model(dataloader, num_classes=len(datasets_dict[name].classes), dataset_name=name.upper())\n","#     results[name] = acc_list\n","\n","#     model_path = f\"{name}_model.pt\"\n","#     torch.save(model.state_dict(), model_path)\n","#     print(f\"Model {name.upper()} disimpan ke: {model_path}\")\n","\n","#     evaluate_model(model, dataloader, name)\n","\n","#     # Plot Accuracy\n","#     plt.figure(figsize=(6, 4))\n","#     plt.plot(range(1, len(acc_list)+1), acc_list, marker='o')\n","#     plt.title(f\"Accuracy per Epoch: {name.upper()}\")\n","#     plt.xlabel(\"Epoch\")\n","#     plt.ylabel(\"Accuracy (%)\")\n","#     plt.grid(True)\n","#     plt.tight_layout()\n","#     plt.savefig(f\"accuracy_plot_{name}.png\")\n","#     plt.close()\n","\n","#     # Plot Loss\n","#     plt.figure(figsize=(6, 4))\n","#     plt.plot(range(1, len(loss_list)+1), loss_list, marker='o', color='red')\n","#     plt.title(f\"Loss per Epoch: {name.upper()}\")\n","#     plt.xlabel(\"Epoch\")\n","#     plt.ylabel(\"Loss\")\n","#     plt.grid(True)\n","#     plt.tight_layout()\n","#     plt.savefig(f\"loss_plot_{name}.png\")\n","#     plt.close()\n","\n","\n","# # # Simpan ke file\n","# # with open(script_path, \"w\") as f:\n","# #     f.write(script_content)\n","\n","# # script_path\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"8r61mGxiEM0R","executionInfo":{"status":"error","timestamp":1747197560728,"user_tz":-420,"elapsed":370863,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"}},"outputId":"39eb2d12-334e-4b5a-d8ca-2bd0f91caf58"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-15-b1c23ffc0a66>:19: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n","  scaler = GradScaler()\n"]},{"output_type":"stream","name":"stdout","text":["🖥️ Device aktif: cuda\n","\\nMulai training model untuk dataset: FER2013\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 1/40:   0%|                                                 | 0/449 [00:00<?, ?it/s]<ipython-input-15-b1c23ffc0a66>:83: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n","  with autocast():\n","[FER2013] Epoch 1/40: 100%|██████| 449/449 [00:16<00:00, 27.34it/s, acc=40.08%, batch=449, loss=1.2]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 1: Akurasi = 40.08%, Loss = 1.5339\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 2/40: 100%|█████| 449/449 [00:16<00:00, 27.79it/s, acc=51.13%, batch=449, loss=1.14]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 2: Akurasi = 51.13%, Loss = 1.2843\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 3/40: 100%|█████| 449/449 [00:16<00:00, 27.66it/s, acc=57.09%, batch=449, loss=1.18]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 3: Akurasi = 57.09%, Loss = 1.1388\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 4/40: 100%|██████| 449/449 [00:15<00:00, 28.40it/s, acc=62.37%, batch=449, loss=1.1]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 4: Akurasi = 62.37%, Loss = 1.0048\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 5/40: 100%|████| 449/449 [00:17<00:00, 24.98it/s, acc=68.31%, batch=449, loss=0.936]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 5: Akurasi = 68.31%, Loss = 0.8556\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 6/40: 100%|████| 449/449 [00:16<00:00, 27.14it/s, acc=74.78%, batch=449, loss=0.745]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 6: Akurasi = 74.78%, Loss = 0.6983\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 7/40: 100%|████| 449/449 [00:16<00:00, 26.96it/s, acc=81.10%, batch=449, loss=0.401]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 7: Akurasi = 81.10%, Loss = 0.5331\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 8/40: 100%|████| 449/449 [00:16<00:00, 27.73it/s, acc=86.93%, batch=449, loss=0.369]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 8: Akurasi = 86.93%, Loss = 0.3813\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 9/40: 100%|████| 449/449 [00:16<00:00, 27.84it/s, acc=91.70%, batch=449, loss=0.331]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 9: Akurasi = 91.70%, Loss = 0.2556\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 10/40: 100%|███| 449/449 [00:16<00:00, 26.48it/s, acc=94.96%, batch=449, loss=0.242]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 10: Akurasi = 94.96%, Loss = 0.1688\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 11/40: 100%|████| 449/449 [00:15<00:00, 28.18it/s, acc=96.53%, batch=449, loss=0.17]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 11: Akurasi = 96.53%, Loss = 0.1230\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 12/40: 100%|███| 449/449 [00:16<00:00, 27.91it/s, acc=97.39%, batch=449, loss=0.104]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 12: Akurasi = 97.39%, Loss = 0.0960\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 13/40: 100%|███| 449/449 [00:15<00:00, 28.67it/s, acc=97.66%, batch=449, loss=0.086]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 13: Akurasi = 97.66%, Loss = 0.0880\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 14/40: 100%|████| 449/449 [00:17<00:00, 25.83it/s, acc=97.82%, batch=449, loss=0.12]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 14: Akurasi = 97.82%, Loss = 0.0798\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 15/40: 100%|██| 449/449 [00:16<00:00, 28.02it/s, acc=98.00%, batch=449, loss=0.0587]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 15: Akurasi = 98.00%, Loss = 0.0735\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 16/40: 100%|███| 449/449 [00:19<00:00, 22.78it/s, acc=98.36%, batch=449, loss=0.252]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 16: Akurasi = 98.36%, Loss = 0.0627\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 17/40: 100%|██| 449/449 [00:16<00:00, 27.27it/s, acc=98.58%, batch=449, loss=0.0219]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 17: Akurasi = 98.58%, Loss = 0.0586\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 18/40: 100%|██| 449/449 [00:16<00:00, 27.23it/s, acc=98.73%, batch=449, loss=0.0259]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 18: Akurasi = 98.73%, Loss = 0.0527\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 19/40: 100%|██| 449/449 [00:16<00:00, 27.39it/s, acc=98.47%, batch=449, loss=0.0213]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 19: Akurasi = 98.47%, Loss = 0.0586\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 20/40: 100%|███| 449/449 [00:17<00:00, 26.12it/s, acc=98.14%, batch=449, loss=0.366]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 20: Akurasi = 98.14%, Loss = 0.0636\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 21/40: 100%|███| 449/449 [00:15<00:00, 28.44it/s, acc=98.31%, batch=449, loss=0.133]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 21: Akurasi = 98.31%, Loss = 0.0618\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 22/40: 100%|██| 449/449 [00:18<00:00, 24.61it/s, acc=98.86%, batch=449, loss=0.0176]\n"]},{"output_type":"stream","name":"stdout","text":["Selesai [FER2013] Epoch 22: Akurasi = 98.86%, Loss = 0.0451\\n\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 23/40:  28%|▎| 124/449 [00:04<00:10, 29.82it/s, acc=99.45%, batch=124, loss=0.00196]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-b1c23ffc0a66>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataloader\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataloaders\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\\\nMulai training model untuk dataset: {name.upper()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 145\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0macc_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatasets_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    146\u001b[0m     \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0macc_list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-b1c23ffc0a66>\u001b[0m in \u001b[0;36mtrain_model\u001b[0;34m(dataloader, num_classes, dataset_name, epochs)\u001b[0m\n\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m             \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscale\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m             \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m             \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/amp/grad_scaler.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, optimizer, *args, **kwargs)\u001b[0m\n\u001b[1;32m    449\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    450\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0moptimizer_state\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"stage\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mOptState\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mREADY\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 451\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munscale_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    452\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m         assert (\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/amp/grad_scaler.py\u001b[0m in \u001b[0;36munscale_\u001b[0;34m(self, optimizer)\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# FP32 division can be imprecise for certain compile options, so we carry out the reciprocal in FP64.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scale\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 335\u001b[0;31m         \u001b[0minv_scale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdouble\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreciprocal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    336\u001b[0m         \u001b[0mfound_inf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfull\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    337\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["\n","# # ✅ Optimized Training Script for FER2013 & RAF-DB\n","\n","# from sklearn.metrics import confusion_matrix, classification_report\n","# import seaborn as sns\n","# import pandas as pd\n","# import os\n","# import torch\n","# import torch.nn as nn\n","# import torch.optim as optim\n","# from torchvision import datasets, transforms\n","# from torch.utils.data import DataLoader\n","# from tqdm import tqdm\n","# import matplotlib.pyplot as plt\n","# from torch.cuda.amp import autocast, GradScaler\n","\n","# # ✅ Setup device\n","# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","# print(\"🖥️ Device aktif:\", device)\n","\n","# # ✅ Transformasi gambar + augmentasi\n","# transform = transforms.Compose([\n","#     transforms.RandomHorizontalFlip(),\n","#     transforms.RandomRotation(10),\n","#     transforms.Grayscale(num_output_channels=1),\n","#     transforms.Resize((48, 48)),\n","#     transforms.ToTensor(),\n","#     transforms.Normalize((0.5,), (0.5,))f\n","# ])\n","\n","# # ✅ Dataset paths\n","# data_paths = {\n","#     \"fer2013\": \"fer2013/train\",\n","#     \"rafdb\": \"rafdb/DATASET/train\"\n","# }\n","\n","# # ✅ Load datasets\n","# datasets_dict = {\n","#     name: datasets.ImageFolder(root=path, transform=transform)\n","#     for name, path in data_paths.items()\n","# }\n","\n","# # ✅ Load dataloaders\n","# dataloaders = {\n","#     name: DataLoader(ds, batch_size=128, shuffle=True, num_workers=2, pin_memory=True)\n","#     for name, ds in datasets_dict.items()\n","# }\n","\n","# # ✅ CNN Model\n","# class SimpleCNN(nn.Module):\n","#     def __init__(self, num_classes):\n","#         super(SimpleCNN, self).__init__()\n","#         self.conv = nn.Sequential(\n","#             nn.Conv2d(1, 32, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2),\n","#             nn.Conv2d(32, 64, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2)\n","#         )\n","#         self.fc = nn.Sequential(\n","#             nn.Linear(64 * 12 * 12, 128), nn.ReLU(),\n","#             nn.Dropout(0.3),\n","#             nn.Linear(128, num_classes)\n","#         )\n","\n","#     def forward(self, x):\n","#         x = self.conv(x)\n","#         x = x.view(x.size(0), -1)\n","#         return self.fc(x)\n","\n","# # ✅ Train function with mixed precision + early stopping + scheduler\n","# def train_model(dataloader, num_classes, dataset_name, epochs=50):\n","#     model = SimpleCNN(num_classes).to(device)\n","#     criterion = nn.CrossEntropyLoss()\n","#     optimizer = optim.Adam(model.parameters(), lr=0.001)\n","#     scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.5)\n","#     scaler = GradScaler()\n","\n","#     accuracy_list = []\n","#     best_acc = 0\n","#     trigger = 0\n","#     patience = 5\n","\n","#     for epoch in range(epochs):\n","#         correct, total = 0, 0\n","#         model.train()\n","\n","#         loop = tqdm(enumerate(dataloader), total=len(dataloader),\n","#                     desc=f\"[{dataset_name}] Epoch {epoch+1}/{epochs}\",\n","#                     leave=True, ncols=100)\n","\n","#         for i, (images, labels) in loop:\n","#             images, labels = images.to(device), labels.to(device)\n","#             optimizer.zero_grad()\n","\n","#             with autocast():\n","#                 outputs = model(images)\n","#                 loss = criterion(outputs, labels)\n","\n","#             scaler.scale(loss).backward()\n","#             scaler.step(optimizer)\n","#             scaler.update()\n","\n","#             _, predicted = torch.max(outputs.data, 1)\n","#             total += labels.size(0)\n","#             correct += (predicted == labels).sum().item()\n","#             acc = 100 * correct / total\n","\n","#             loop.set_postfix(batch=i+1, loss=loss.item(), acc=f\"{acc:.2f}%\")\n","\n","#         scheduler.step()\n","#         accuracy_list.append(acc)\n","#         print(f\"✅ Selesai [{dataset_name}] Epoch {epoch+1}: Akurasi Akhir = {acc:.2f}%\")\n","\n","#         if acc > best_acc:\n","#             best_acc = acc\n","#             trigger = 0\n","#         else:\n","#             trigger += 1\n","\n","#         if trigger >= patience:\n","#             print(\"⛔ Early stopping triggered!\")\n","#             break\n","\n","#     return model, accuracy_list\n","\n","# # ✅ Evaluation\n","# def evaluate_model(model, dataloader, dataset_name):\n","#     model.eval()\n","#     all_preds = []\n","#     all_labels = []\n","\n","#     with torch.no_grad():\n","#         for images, labels in dataloader:\n","#             images, labels = images.to(device), labels.to(device)\n","#             outputs = model(images)\n","#             _, predicted = torch.max(outputs, 1)\n","#             all_preds.extend(predicted.cpu().numpy())\n","#             all_labels.extend(labels.cpu().numpy())\n","\n","#     class_names = dataloader.dataset.classes\n","#     cm = confusion_matrix(all_labels, all_preds)\n","#     cm_df = pd.DataFrame(cm, index=class_names, columns=class_names)\n","\n","#     print(f\"\\\\n🧾 Classification Report for {dataset_name.upper()}:\\\\n\")\n","#     print(classification_report(all_labels, all_preds, target_names=class_names, digits=4))\n","\n","#     plt.figure(figsize=(8, 6))\n","#     sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues')\n","#     plt.title(f'🔍 Confusion Matrix - {dataset_name.upper()}')\n","#     plt.xlabel(\"Predicted Label\")\n","#     plt.ylabel(\"True Label\")\n","#     plt.tight_layout()\n","#     plt.show()\n","\n","# # ✅ Train + Save + Evaluate\n","# results = {}\n","# for name, dataloader in dataloaders.items():\n","#     print(f\"\\\\n🚀 Mulai training model untuk dataset: {name.upper()}\")\n","#     model, acc = train_model(dataloader, num_classes=len(datasets_dict[name].classes), dataset_name=name.upper())\n","#     results[name] = acc\n","\n","#     model_path = f\"{name}_model.pt\"\n","#     torch.save(model.state_dict(), model_path)\n","#     print(f\"💾 Model {name.upper()} disimpan ke: {model_path}\")\n","\n","#     evaluate_model(model, dataloader, name)\n","\n","# # ✅ Plot akurasi\n","# for name, acc in results.items():\n","#     plt.figure(figsize=(6, 4))\n","#     plt.plot(range(1, len(acc)+1), acc, marker='o')\n","#     plt.title(f\"📈 Akurasi per Epoch: {name.upper()}\")\n","#     plt.xlabel(\"Epoch\")\n","#     plt.ylabel(\"Accuracy (%)\")\n","#     plt.grid(True)\n","#     plt.tight_layout()\n","#     plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"OlAHprDEwaZs","executionInfo":{"status":"error","timestamp":1747194091290,"user_tz":-420,"elapsed":835179,"user":{"displayName":"Jonathan Farrel Emanuel","userId":"14029240381796311687"}},"outputId":"ef650751-0d35-42db-9151-3b2e3a84cf43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["🖥️ Device aktif: cuda\n","\\n🚀 Mulai training model untuk dataset: FER2013\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-4cb73e4f4394>:73: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n","  scaler = GradScaler()\n","[FER2013] Epoch 1/50:   0%|                                                 | 0/225 [00:00<?, ?it/s]<ipython-input-8-4cb73e4f4394>:92: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n","  with autocast():\n","[FER2013] Epoch 1/50: 100%|█████| 225/225 [00:28<00:00,  7.93it/s, acc=33.08%, batch=225, loss=1.43]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 1: Akurasi Akhir = 33.08%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 2/50: 100%|██████| 225/225 [00:15<00:00, 14.59it/s, acc=41.46%, batch=225, loss=1.4]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 2: Akurasi Akhir = 41.46%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 3/50: 100%|█████| 225/225 [00:15<00:00, 14.45it/s, acc=44.77%, batch=225, loss=1.42]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 3: Akurasi Akhir = 44.77%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 4/50: 100%|█████| 225/225 [00:18<00:00, 12.39it/s, acc=47.26%, batch=225, loss=1.07]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 4: Akurasi Akhir = 47.26%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 5/50: 100%|██████| 225/225 [00:15<00:00, 14.60it/s, acc=48.81%, batch=225, loss=1.2]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 5: Akurasi Akhir = 48.81%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 6/50: 100%|█████| 225/225 [00:15<00:00, 14.34it/s, acc=50.29%, batch=225, loss=1.14]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 6: Akurasi Akhir = 50.29%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 7/50: 100%|████| 225/225 [00:16<00:00, 13.80it/s, acc=51.13%, batch=225, loss=0.994]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 7: Akurasi Akhir = 51.13%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 8/50: 100%|█████| 225/225 [00:15<00:00, 14.73it/s, acc=52.12%, batch=225, loss=1.43]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 8: Akurasi Akhir = 52.12%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 9/50: 100%|█████| 225/225 [00:15<00:00, 14.68it/s, acc=52.86%, batch=225, loss=1.25]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 9: Akurasi Akhir = 52.86%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 10/50: 100%|███| 225/225 [00:15<00:00, 14.74it/s, acc=53.76%, batch=225, loss=0.991]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 10: Akurasi Akhir = 53.76%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 11/50: 100%|████| 225/225 [00:15<00:00, 14.60it/s, acc=55.00%, batch=225, loss=1.21]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 11: Akurasi Akhir = 55.00%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 12/50: 100%|████| 225/225 [00:15<00:00, 14.53it/s, acc=55.43%, batch=225, loss=1.13]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 12: Akurasi Akhir = 55.43%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 13/50: 100%|████| 225/225 [00:15<00:00, 14.15it/s, acc=56.10%, batch=225, loss=1.01]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 13: Akurasi Akhir = 56.10%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 14/50: 100%|███| 225/225 [00:15<00:00, 14.52it/s, acc=56.36%, batch=225, loss=0.844]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 14: Akurasi Akhir = 56.36%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 15/50: 100%|████| 225/225 [00:15<00:00, 14.89it/s, acc=56.56%, batch=225, loss=1.44]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 15: Akurasi Akhir = 56.56%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 16/50: 100%|███| 225/225 [00:15<00:00, 14.88it/s, acc=56.85%, batch=225, loss=0.981]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 16: Akurasi Akhir = 56.85%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 17/50: 100%|████| 225/225 [00:15<00:00, 14.89it/s, acc=57.11%, batch=225, loss=1.36]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 17: Akurasi Akhir = 57.11%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 18/50: 100%|████| 225/225 [00:15<00:00, 14.92it/s, acc=57.20%, batch=225, loss=1.23]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 18: Akurasi Akhir = 57.20%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 19/50: 100%|███| 225/225 [00:16<00:00, 13.45it/s, acc=57.51%, batch=225, loss=0.996]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 19: Akurasi Akhir = 57.51%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 20/50: 100%|████| 225/225 [00:15<00:00, 14.89it/s, acc=58.09%, batch=225, loss=1.11]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 20: Akurasi Akhir = 58.09%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 21/50: 100%|███| 225/225 [00:15<00:00, 14.98it/s, acc=58.56%, batch=225, loss=0.913]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 21: Akurasi Akhir = 58.56%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 22/50: 100%|████| 225/225 [00:15<00:00, 14.73it/s, acc=58.96%, batch=225, loss=1.19]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 22: Akurasi Akhir = 58.96%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 23/50: 100%|███| 225/225 [00:15<00:00, 14.38it/s, acc=59.37%, batch=225, loss=0.822]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 23: Akurasi Akhir = 59.37%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 24/50: 100%|████| 225/225 [00:15<00:00, 14.48it/s, acc=59.67%, batch=225, loss=1.05]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 24: Akurasi Akhir = 59.67%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 25/50: 100%|████| 225/225 [00:15<00:00, 14.76it/s, acc=59.75%, batch=225, loss=1.08]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 25: Akurasi Akhir = 59.75%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 26/50: 100%|████| 225/225 [00:15<00:00, 14.94it/s, acc=60.04%, batch=225, loss=1.03]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 26: Akurasi Akhir = 60.04%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 27/50: 100%|████| 225/225 [00:15<00:00, 14.99it/s, acc=59.66%, batch=225, loss=1.18]\n"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 27: Akurasi Akhir = 59.66%\n"]},{"output_type":"stream","name":"stderr","text":["[FER2013] Epoch 28/50: 100%|████| 225/225 [00:15<00:00, 14.91it/s, acc=60.21%, batch=225, loss=1.16]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 28: Akurasi Akhir = 60.21%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 29/50: 100%|███| 225/225 [00:15<00:00, 14.94it/s, acc=60.26%, batch=225, loss=0.905]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 29: Akurasi Akhir = 60.26%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 30/50: 100%|███| 225/225 [00:15<00:00, 14.96it/s, acc=60.34%, batch=225, loss=0.788]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 30: Akurasi Akhir = 60.34%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 31/50: 100%|███| 225/225 [00:14<00:00, 15.04it/s, acc=61.28%, batch=225, loss=0.889]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 31: Akurasi Akhir = 61.28%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 32/50: 100%|███| 225/225 [00:16<00:00, 13.51it/s, acc=60.74%, batch=225, loss=0.958]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 32: Akurasi Akhir = 60.74%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 33/50: 100%|███| 225/225 [00:15<00:00, 14.17it/s, acc=61.21%, batch=225, loss=0.902]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 33: Akurasi Akhir = 61.21%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 34/50: 100%|████| 225/225 [00:18<00:00, 12.11it/s, acc=61.30%, batch=225, loss=1.27]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 34: Akurasi Akhir = 61.30%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 35/50: 100%|████| 225/225 [00:15<00:00, 14.49it/s, acc=61.19%, batch=225, loss=1.03]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 35: Akurasi Akhir = 61.19%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 36/50: 100%|███| 225/225 [00:15<00:00, 14.47it/s, acc=61.61%, batch=225, loss=0.966]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 36: Akurasi Akhir = 61.61%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 37/50: 100%|███| 225/225 [00:15<00:00, 14.81it/s, acc=61.54%, batch=225, loss=0.774]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 37: Akurasi Akhir = 61.54%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 38/50: 100%|███| 225/225 [00:15<00:00, 14.80it/s, acc=61.68%, batch=225, loss=0.805]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 38: Akurasi Akhir = 61.68%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 39/50: 100%|███| 225/225 [00:15<00:00, 14.83it/s, acc=61.72%, batch=225, loss=0.969]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 39: Akurasi Akhir = 61.72%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 40/50: 100%|████| 225/225 [00:15<00:00, 14.58it/s, acc=61.95%, batch=225, loss=1.01]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 40: Akurasi Akhir = 61.95%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 41/50: 100%|███| 225/225 [00:15<00:00, 14.79it/s, acc=61.92%, batch=225, loss=0.953]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 41: Akurasi Akhir = 61.92%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 42/50: 100%|████| 225/225 [00:15<00:00, 14.79it/s, acc=62.07%, batch=225, loss=1.01]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 42: Akurasi Akhir = 62.07%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 43/50: 100%|███| 225/225 [00:15<00:00, 14.59it/s, acc=62.09%, batch=225, loss=0.852]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 43: Akurasi Akhir = 62.09%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 44/50: 100%|███| 225/225 [00:15<00:00, 14.29it/s, acc=62.00%, batch=225, loss=0.949]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 44: Akurasi Akhir = 62.00%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 45/50: 100%|████| 225/225 [00:15<00:00, 14.63it/s, acc=62.20%, batch=225, loss=1.09]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 45: Akurasi Akhir = 62.20%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 46/50: 100%|████| 225/225 [00:15<00:00, 14.92it/s, acc=62.12%, batch=225, loss=1.06]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 46: Akurasi Akhir = 62.12%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 47/50: 100%|████| 225/225 [00:15<00:00, 14.99it/s, acc=62.15%, batch=225, loss=1.03]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 47: Akurasi Akhir = 62.15%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 48/50: 100%|████| 225/225 [00:15<00:00, 14.91it/s, acc=62.04%, batch=225, loss=1.07]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 48: Akurasi Akhir = 62.04%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 49/50: 100%|████| 225/225 [00:16<00:00, 13.35it/s, acc=62.51%, batch=225, loss=1.17]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 49: Akurasi Akhir = 62.51%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[FER2013] Epoch 50/50: 100%|███| 225/225 [00:15<00:00, 14.64it/s, acc=62.29%, batch=225, loss=0.895]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [FER2013] Epoch 50: Akurasi Akhir = 62.29%\n","💾 Model FER2013 disimpan ke: fer2013_model.pt\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["\\n🧾 Classification Report for FER2013:\\n\n","              precision    recall  f1-score   support\n","\n","       angry     0.6015    0.5564    0.5781      3995\n","     disgust     0.8883    0.3830    0.5353       436\n","        fear     0.6015    0.4013    0.4814      4097\n","       happy     0.7932    0.8783    0.8336      7215\n","     neutral     0.6070    0.6453    0.6256      4965\n","         sad     0.5250    0.6054    0.5623      4830\n","    surprise     0.7720    0.7925    0.7821      3171\n","\n","    accuracy                         0.6622     28709\n","   macro avg     0.6841    0.6089    0.6283     28709\n","weighted avg     0.6610    0.6622    0.6560     28709\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-4cb73e4f4394>:149: UserWarning: Glyph 128269 (\\N{LEFT-POINTING MAGNIFYING GLASS}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128269 (\\N{LEFT-POINTING MAGNIFYING GLASS}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\\n🚀 Mulai training model untuk dataset: RAFDB\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-4cb73e4f4394>:73: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n","  scaler = GradScaler()\n","[RAFDB] Epoch 1/50:   0%|                                                    | 0/96 [00:00<?, ?it/s]<ipython-input-8-4cb73e4f4394>:92: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n","  with autocast():\n","[RAFDB] Epoch 1/50: 100%|██████████| 96/96 [00:10<00:00,  9.16it/s, acc=45.11%, batch=96, loss=1.34]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [RAFDB] Epoch 1: Akurasi Akhir = 45.11%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[RAFDB] Epoch 2/50: 100%|██████████| 96/96 [00:07<00:00, 12.49it/s, acc=55.69%, batch=96, loss=1.18]"]},{"output_type":"stream","name":"stdout","text":["✅ Selesai [RAFDB] Epoch 2: Akurasi Akhir = 55.69%\n"]},{"output_type":"stream","name":"stderr","text":["\n","[RAFDB] Epoch 3/50:  85%|████████▌ | 82/96 [00:08<00:01, 10.11it/s, acc=60.35%, batch=82, loss=1.16]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-4cb73e4f4394>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataloader\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataloaders\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\\\n🚀 Mulai training model untuk dataset: {name.upper()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0macc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatasets_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m     \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0macc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-8-4cb73e4f4394>\u001b[0m in \u001b[0;36mtrain_model\u001b[0;34m(dataloader, num_classes, dataset_name, epochs)\u001b[0m\n\u001b[1;32m     86\u001b[0m                     leave=True, ncols=100)\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mloop\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m             \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m             \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tqdm/std.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1179\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1180\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1181\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mobj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1182\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1183\u001b[0m                 \u001b[0;31m# Update and possibly print the progressbar.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    707\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 708\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    709\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    710\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1456\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1457\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_shutdown\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1458\u001b[0;31m             \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1459\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1460\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_get_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1408\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_alive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1410\u001b[0;31m                 \u001b[0msuccess\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1411\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1412\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_try_get_data\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1249\u001b[0m         \u001b[0;31m#   (bool: whether successfully get data, any: data if successful else None)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1250\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1251\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data_queue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1252\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1253\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/queue.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    178\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mremaining\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnot_empty\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mremaining\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnot_full\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnotify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    329\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 331\u001b[0;31m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}